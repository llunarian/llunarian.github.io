<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://llunarian.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://llunarian.github.io/" rel="alternate" type="text/html" /><updated>2021-01-15T11:10:10+09:00</updated><id>https://llunarian.github.io/feed.xml</id><title type="html">null_type</title><subtitle>devops 공부하는 블로그</subtitle><author><name>null_type</name></author><entry><title type="html">1.시작하며</title><link href="https://llunarian.github.io/site%20reliability%20engineering/SRE-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0/" rel="alternate" type="text/html" title="1.시작하며" /><published>2021-01-15T00:00:00+09:00</published><updated>2021-01-15T00:00:00+09:00</updated><id>https://llunarian.github.io/site%20reliability%20engineering/SRE-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0</id><content type="html" xml:base="https://llunarian.github.io/site%20reliability%20engineering/SRE-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0/">&lt;blockquote&gt;
  &lt;p&gt;📌 이 시리즈는 ⟪사이트 신뢰성 엔지니어링⟫(벳시 베이어, 크리스 존스, 제니퍼 펫오프, 니얼 리처드 머피 지음, 제이펍, ISBN 979-11-88621-08-8) 의 내용을 개인적으로 학습하고 정리하기 위해 쓰여졌습니다. 따라서 해당 글을 인용 및 재배포하는 것에 대한 주의를 부탁드립니다.🚨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;SRE에 대해 더 알고싶으시다면 &lt;a href=&quot;https://sre.google/&quot;&gt;여기&lt;/a&gt; 를 참고 하세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음 500페이지가 훌쩍 넘는 이 책을 받아들었을 때는 ‘이걸 과연 언제 다 읽어볼 수 있을까’ 라는 생각에 머뭇거렸었는데, 2021년에는 꼭 한 권을 다 소화해보자고 다짐하고 시작하게 되었다. 최대한 빠르게 책 속의 내용을 이해하고 정리하기 위해서 불필요한 서술은 최대한 제외하고(그래도 유우머는 잃고 싶지 않아…) 핵심 내용과 그에 대한 설명 위주로 시리즈를 진행하기로 한다.&lt;/p&gt;
&lt;h2 id=&quot;시리즈-진행에-대한-간단한-계획&quot;&gt;시리즈 진행에 대한 간단한 계획&lt;/h2&gt;

&lt;p&gt;이 블로그는 사내 Devops 파트의 역할을 발전시키고 가이드라인을 제시하는데 기본적인 목적이 있다. 따라서 목적에 부합하는 내용을 중점적으로 다루며 이외의 내용은 다소 생략하는 부분도 있음을 미리 밝힌다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 전체적인 개요와 머리말을 정리할 것이다.&lt;/p&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;“사이트 신뢰성 엔지니어링은 기존의 데브옵스(DevOps)로부터 한 단계 더 발전한 모델이다. 기존의 데브옵스는 애플리케이션을 위한 네트워크나 저장소 같은 인프라스트럭처의 구성, 모니터링 및 알림 시스템의 구축, 빌드 및 배포 자동화 등 소프트웨어 개발 주기(Software Development Lifecycle, SDLC)와 관련된 여러 작업들의 수행 및 자동화 스크립트 개발에 집중한다. 반면, 사이트 신뢰성 엔지니어는 여기에서 한 걸음 더 나아가 애플리케이션이 이러한 인프라스트럭처들을 활용할 수 있는 라이브러리나 프레임워크까지 직접 개발하기도 하고, 제품이나 서비스에 문제가 발생하면 이를 함께 해결하기도 한다.”
⋯
소프트웨어 엔지니어링이라는 것이 주로 소프트웨어 시스템을 디자인하고 개발하는 데 초점을 맞춘 것이라면, 소프트웨어 객체를 처음부터 배포와 운영, 개선, 그리고 폐기에 이르기까지 전체 생명주기를 다루는 방법 또한 존재해야 한다. 이 방법은 다양한 범위의 기술을 사용하지만 (그리고 반드시 활용해야 하지만), 여타의 엔지니어들과는 별개의 관점에서 접근해야 한다. 이러한 방법에 대한 구글의 답변이 바로 사이트 신뢰성 엔지니어링(Site Reliability Engineering)이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이책에서 설명하는 SRE의 개념이다. 그러면서도 아직은 ‘구글의 모든 SRE들의 명확한 역할과 업무가 어떤것이다라고 한마디로 표현할 수 없다.’고도 한다. 나도 처음 이 개념을 들었을 때 도대체 어떤 직무인지 잘 감이 오지 않는다. 그러므로 우리는 SRE이 라는 단어를 하나씩 음미해가며 책을 읽기 시작해야 할 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;sre들은-엔지니어이다&quot;&gt;SRE들은 ‘엔지니어’이다.&lt;/h3&gt;
&lt;p&gt;문득 예전에 찾아보았던 엔지니어와 테크니션의 차이점이 생각이 나서 Quara에 쉽게 설명되어 있는 글을 올려 보았다.
&lt;img src=&quot;https://images.velog.io/images/llunarian/post/427aa2b1-4558-4732-9501-5d201c36edbe/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;간단히 말하여 테크니션은 실제 실무에 능숙하고, 엔지니어는 문제를 해결할 줄 아는 사람이라고 이해했다. 엔지니어가 문제를 해결하기 위해 여러 과학적 이론에 의지해야 하는 것, 따라서 현존하는 해결방법으로 문제를 해결하거나, 또는 새로운 문제를 해결하기 위해 고민하는 것이 기술자와의 차이일 것이다. 현재 나는 어느 쪽에 더 가까운가? 어느쪽에도 미치지 못하는 주니어라서 부끄럽지만 테크니션보다는 엔지니어에 가까운 사람이 되고 싶다.&lt;/p&gt;

&lt;h3 id=&quot;sre는-신뢰성reliability에-집중한다&quot;&gt;SRE는 신뢰성(reliability)에 집중한다.&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;우리는 신뢰성에 대해 [Ocol2]에 따라 &lt;strong&gt;‘어떤 시스템이 일정한 조건에서 일정한 기간에 장애 없이 필요한 기능을 수행할 수 있는 가능성’&lt;/strong&gt; 으로 정의하고 있다.
⋯
신뢰성이라는 것은 매우 중요한 것이기 때문에 SRE는 더욱 확장 가능하고, 안정적이며, 효율적으로 만들기 위한 시스템 디자인 및 운영에 초점을 맞춘다. 그러나 우리의 노력을 단 한 가지 다른 방향으로 투입하는 경우가 있는데, 그것은 시스템이 &lt;strong&gt;‘충분히 안정적인’ 경우 새로운 기능을 추가하거나 새로운 제품을 개발하는 데 집중하기도 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 내용에서 알 수 있듯이 SRE는 시스템의 가용성, 내구성에 집중한다. AWS를 사용하는 우리 회사의 경우 AWS에서 정의하고 있는 제품별 가용성과 내구성을 판단하여 이중화나 멀티 리전 등의 HA 구성으로 필요한 가용성을 맞춰갈 수 있을 것이라 생각한다. (물론 비용과의 균형은 항상 중요하다.)
또한 시스템이 안정적일 경우 새로운 기능(각종 모니터링 툴, IaC 스크립트 등)을 개발하여 효율적인 제품의 배포와 모니터링이 가능하도록 하는 것이 SRE의 또다른 역할임을 알 수 있다.
이 책에서는 Devops의 정의를 약간 다른 방향으로 해석하는데, IaC 에 중점을 두기는 하지만 가장 중요한 것은 신뢰성이라고 역설한다.&lt;/p&gt;

&lt;h3 id=&quot;sre는-서비스의-운영에-집중한다&quot;&gt;SRE는 서비스의 운영에 집중한다.&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;SRE는 우리의 분산 컴퓨팅 환경상에서 구현된 서비스의 운영에 집중한다.
⋯ 
원래 SRE에서 ‘사이트’란 &lt;em&gt;google.com&lt;/em&gt; 웹사이트가 정상적으로 동작하게 하는 역할이라는 의미에서 사용한 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;재미있는 사실이면서 어찌 보면 당연한 얘기일 수도 있겠다. ‘사이트’라는 단어가 google.com을 지칭하는 것으로 시작한다는 것은 SRE가 주로 다루어야 할 대상이 ‘웹사이트’를 의미하는 것으로 이해할 수 있고, 다른 소프트웨어 시스템에서는 이러한 직무을 어떻게 지칭하는지는 여기서는 알 수 없다. 그래도 처음 생각했던 SRE의 막연히 넓은 범위에서 어느정도 좁혀진 것 같은 느낌은 든다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
물론 스타트업처럼 서비스 개발 주기가 빠르고 애자일한 조직은 조금 이르다고 생각할 수도 있겠지만, 오히려 작은 조직에서부터 SRE를 고려하고 시작하는 것이 이미 대규모 서비스를 운영하고 나서 도입하는 것보다 훨씬 효율적이고 적절하다고 생각한다. 개인적으로도 소프트웨어 개발 지식과 시스템 엔지니어링을 겸비하는 것이 SRE 업무를 실제로 수행하는데 중요한 조건임을 깨닫고 있는 중이다.&lt;/p&gt;</content><author><name>null_type</name></author><category term="Site Reliability Engineering" /><summary type="html">📌 이 시리즈는 ⟪사이트 신뢰성 엔지니어링⟫(벳시 베이어, 크리스 존스, 제니퍼 펫오프, 니얼 리처드 머피 지음, 제이펍, ISBN 979-11-88621-08-8) 의 내용을 개인적으로 학습하고 정리하기 위해 쓰여졌습니다. 따라서 해당 글을 인용 및 재배포하는 것에 대한 주의를 부탁드립니다.🚨</summary></entry><entry><title type="html">2020년 회고록</title><link href="https://llunarian.github.io/diary/first_post/" rel="alternate" type="text/html" title="2020년 회고록" /><published>2021-01-13T00:00:00+09:00</published><updated>2021-01-13T00:00:00+09:00</updated><id>https://llunarian.github.io/diary/first_post</id><content type="html" xml:base="https://llunarian.github.io/diary/first_post/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://images.velog.io/images/llunarian/post/d0bd50f8-1b69-45c2-b2ad-8e4e20025d23/image.png&quot; width=&quot;400px&quot; /&gt;
&lt;center&gt;한줄 요약: 내가 이 짤을 올해 쓸 줄은 몰랐는데...🙊&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;삶이 단순해진다는 것은 많은 이점이 있다.
산만하고 복잡했던 생각도 단순해지고, 집중하고 싶은 것들에 집중할 수 있게 된다.
올해는 여러가지로 많이 단순해진 한 해였다고 생각한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;회고 1: 왜 퇴사했나&lt;/h3&gt;
&lt;p&gt;19년에 공채로 처음 입사했던 회사.&lt;br /&gt;
 10명이 넘는 동기들과 함께 각 부서에 배치되고, 처음엔 매우 의욕적으로 일했던 기억이 난다.&lt;br /&gt;
 &lt;br /&gt;
 겉으로 보기에 사람들도 합리적이고, 정년도 보장해주는 분위기에&lt;br /&gt;
 워라밸도 나쁘지 않고 무탈하게 지낼 수 있다고 생각해서 잠깐은 좋았던 것 같다.&lt;br /&gt;
 허나 그 생각이 바뀌는 데는 오랜 시간이 걸리지 않았지…
 &lt;br /&gt;
 결론적으로 내가 이직하게 된 이유를 간단히 떠올려 보면,&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;1. 사수들이 전부 탈주함&lt;/h4&gt;

&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://images.velog.io/images/llunarian/post/694d1cca-0866-4baa-aa79-a96fe3350de1/image.png&quot; width=&quot;400px&quot; /&gt;
&lt;p /&gt;
입사 전부터 있었던 관리자급 밑의 과장, 대리, 사원 실무자들이 전부 한명씩 이직을 해버리게 됨. 그자리는 다른 경력자들의 자리로 채워지게 되었지만, 신입사원인 나에게도 굉장히 스펙타클한 일들이 벌어지게 된다.(놀랍게도 과장급, 대리급에서 하던 업무가 일정부분 나에게로 내려오는 일이 벌어짐.)&lt;br /&gt;
그런 까닭에 일을 더 신속하게 배운 것도 있었지만, 과도한 스트레스로 생전 겪어 보지 못했던 병이 찾아오게 되는데...
&lt;br /&gt;
&lt;h4&gt;2. 마음의 병&lt;/h4&gt;
입사하고 얼마 되지 않아 맞닥드린 수많은 업무와 기술 역량이 부족하다는 생각에 따른 조바심, 고객사를 상대하며 받는 압박감, 그럼에도 잘하고 싶은 욕심, 팀에 짐이 되기 싫은 마음, 경직된 사내 문화 같은 것들이 내 몸과 마음을 뒤흔들기 시작했다.&lt;br /&gt;
처음 증상을 느낀건 출근시간 사람들이 꽉 찬 지하철에서였다. 갑자기 질식해 죽을 것 같은 공포감과 호흡이 가빠지는 통에 정신을 잃을 뻔 한 적이 있었는데, 그 이후로 사람이 많은 곳에만 가면 어김 없이 그 고통이 찾아오곤 했다.&lt;br /&gt;
이후엔 사람이 없어도 좁은 공간에 들어가면 똑같은 증상이 있다는 것을 MRI 기계 속으로 들어가면서 깨닫게 된다. (결국 그 MRI 검사는 거꾸로 누워서 하반신부터 겨우겨우 집어넣어서 촬영할 수 있었다.)&lt;br /&gt;
나중에 찾아보니 내가 겪은 그것들이 &lt;b&gt;공황장애&lt;/b&gt;의 증상이라는 것을 알았다.&lt;br /&gt;

입사할 당시엔 그래도 3년은 넘게 다니고 싶은 마음이 컸으나, 이러한 일들이 벌어지고 나서는 과연 이 곳만이 정답일까 하는 의문이 들기 시작했다. 그렇게 일하던 중 내 마음을 완전히 바꾸어 놓게 된 이유가 있었으니 그것은 바로...
&lt;h4&gt;3. 나에게 맞지 않는 옷&lt;/h4&gt;
결론적으로 말하면, 그 회사의 색깔이 나와는 맞지 않는 다는 것을 깨달았기 때문이다.&lt;br /&gt;
여름이 끝나고 날씨가 쌀쌀해질 무렵, 협업의 의미와 팀웍에 대해 다시 한 번 생각하게 되는 계기가 생기게 된다. 일련의 과정이 있었지만 짤 한장으로 정리하면 아래와 같다.
  &lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://images.velog.io/images/llunarian/post/8bc51c81-97fe-4e20-9dc6-1e1719e1b6ac/image.png&quot; width=&quot;400px&quot; /&gt;
&lt;/p&gt;

고객사 요청으로 생긴 개발 프로젝트.
어디에도 없는 관련 가이드와 매뉴얼 = 팀 내에 시스템 없음
본인에게도 시킬까봐 회피하는 팀 분위기와 협업, 공유 제로.
사수가 수행하기로 예정된 프로젝트였으나 사수가 탈주하고 남은 것은 신입인 나^^
애초에 이런 일을 맡을 역량과 시스템조차 없었으나 매출을 위해 가져와버린 영업 부서.
&lt;br /&gt;
3개월이란 시간동안 야근과 밤샘으로 납기일에 맞추어 완성하긴 했으나, 이미 몸과 마음은 너덜너덜...
더이상 이곳에서 배울 것은 많지 않아 보였다.&lt;br /&gt;
한가지 더 이직을 결심하게된 이유는 이 회사에서는 내 미래가 보이지 않았기 때문.
신생 전략 부서 특성상 사업이 틀어지면 언제 다른 부서로 날아갈지 모른다는 불안감과
극악의 연봉 상승률, 라떼가 만연한 경직된 사내 분위기, 현상유지에 급급한 안일한 마인드 등등... 그동안 보이지 않던 것들이 눈에 띄기 시작했다.
보통 회사에서 내 미래는 팀의 관리직이나 임원을 보면 짐작할 수 있다고 하지 않던가. 나는 그분들의 전철을 밟고 싶지 않았다.
2년차 연봉계약서(를 빙자한 연봉 통지서)를 받아든 다음부터, 지나간 내 이력서를 다시 꺼내보기 시작했다.
&lt;br /&gt;
&lt;h3&gt;회고 2 : 왜 스타트업으로 이직했나&lt;/h3&gt;
고통스러웠던 프로젝트가 일단 종료된 다음부터, 일이 손에 잡히지가 않았다. 그동안 쓰지 못한 10일치 연차를 한꺼번에 사용했다. 2주간 그룹웨어, 업무 관련 메일을 전혀 보지 않았다. 거의 요양하다시피 집에서 극진히(?) 쉬었더니 체력은 조금 돌아오는 듯 했다.&lt;br /&gt;
쉬는 동안 곰곰히 생각해보니 직급에 따라 할 수 있는 업무가 나뉘어진다는 것도 이상하긴 했다. 자기가 충분한 역량만 있으면 어떤 미션이라도 해볼 수 있는것 아닌가?
하지만 역량과 연봉은 별개였다. 이 회사에서는 확고한 연봉 테이블이 있었다. 선배들보다 연봉을 더 많이 받으면 안된다는 인사팀의 굉장한 룰이 있었기에, 충분히 받을 수 있던 청년내일채움공제도 거절당했었다. 부들부들...
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://images.velog.io/images/llunarian/post/d20e0661-b8f1-40d8-a5d9-0d3d00847d48/image.png&quot; width=&quot;400px&quot; style=&quot;margin:0&quot; /&gt;
&lt;/p&gt;
그래서 스타트업을 가기로 했다. 선후배가 공고한 수직적인 분위기를 벗어나고 싶었고, 최상급의 인사고과를 받지 않는 이상 전부 일괄적으로 연봉이 오르는 것도 답답했다. 무엇보다 더이상은 수동적으로 일하고 싶지 않았다.

스타트업에 대한 막연한 불안감 (주로 고용안정성에 관련한...)은 지금 직접 스타트업에서 일하면서 많이 해소되었다. 처음엔 월급이 밀리고 댕강댕강 잘리고 이런 것을 상상했는데, 사실 그런 일은 어느정도 투자를 받은 시리즈 A 이상은 잘 없는 것 같다.
그리고 회사 by 회사겠지만, 스타트업이 확실히 사람들이 더 자발적으로 일하고, 자유롭게 의견을 낼 수 있는 것 같다. 적어도 내가 다니는 회사는 그런 듯 하다. 회식도 강제가 아니고 ㅎㅎ
이직을하면서 일단 공황장애 증세가 많이 좋아진 것 같다. 붐비는 지하철도 약간의 불편함은 남아있지만 탈 수 있게 되었고, 나를 죽일 것 같았던 호흡곤란도 많이 줄어들었다. (역시 공황장애의 원인은... 읍읍)
11시까지 출근해도 되고, 복장도 자유로우며 수염을 기르든 탈색을 하든 아무도 뭐라 하지 않는다. 주 40시간만 지킨다면 오후 4시에 퇴근해도 상관없고, 자율적으로 책임을 질 수 있는 시스템이 마음에 든다.&lt;br /&gt;
비록 스타트업에서 일한지 이제 겨우 4개월이지만, 내가 생각하는 스타트업에서 가장 필요한 자질은 '인성'과 '커뮤니케이션 능력'이라고 느꼈다. 이전회사에서는 공채 기수별로 확실히 선후배가 정해졌던 수직구조여서, 선배가 후배에게 어느정도 막말을 하든 갈구든 아랫 사람이 대항할 방법이 사실 없었다.  아랫사람이 어떤 방식으로든 문제를 제기하면 신고자(?)를 익명으로 보호하기가 굉장히 힘든 구조였고, 잘못했다간 회사에 반하는 '문제아'로 낙인찍히기 십상이었다. (그냥 군대라고 생각하면 편하다.) 그러니 윗사람의 성격이 개차반이든, 의사소통이 잘 안되는 사람이든 그의 윗사람에게 좋은 평가만 받는다면 문제 없이 회사를 잘 다닐 수 있었다. 

반면에 지금의 회사에서는 함부로 말하는 사람을 단 한번도 본 적이 없다. 수평적인 마인드와 자유롭게 의견을 수렴하는 분위기가 서로를 자연스레 존중할 수 있게 만든 것 같다. 또한 인사고과를 평가할 때 다른 파트원들의 의견도 자유롭게 듣는 리뷰어제도가 있어서, 협업과 커뮤니케이션을 잘 하는 사람이 그만큼 더 인정받을 수 있다고 생각한다.

그렇다면 이전회사에 비해 현재 다니는 회사의 단점은? 딱히 없다. 모든 면에서 이전 회사보다 좋아서 나도 당황스러움. 굳이 하나 꼽자면 이전 회사에서는 구내식당이 있어서 점심 고민은 안해도 되었다는것? 
&lt;br /&gt;
&lt;h3&gt;회고 3 : 그래서 내년에는?&lt;/h3&gt;
회사에서 내가 필요한 사람이라는 인식을 모두에게 심어줄 수 있도록 내 역량을 키우는 것이 목표이다. Devops 직무로 들어왔으니, 해당 직무에 대한 역량을 우선적으로 향상시킬 것이다.

내년에 갖추고 싶은 역량을 구체적으로 리스팅해보면 아래와 같다.&lt;br /&gt;
&lt;br /&gt;
1. Terraform, CloudFormation, Serverless 등 IaC 에 대해 능숙하게 프로비저닝이 가능하도록 한다.&lt;br /&gt;
2. 컨테이너(도커, 쿠버네티스, EKS) 구축 및 관리능력 (가능하다면 관리 가이드까지 작성)&lt;br /&gt;
3. SRE에 대한 가이드라인 제시 → 결국엔 클라우드 서비스가 고도화되면서 DevOps가 아니더라도 백엔드 개발자가 인프라 리소스 프로비저닝/관리가 가능해질 것이라고 본다. 이럴 때 DevOps는 독자적인 Role을 더 확고히 해야 할 필요가 있다. 굳이 SRE가 아니더라도 MLOps, DevSecOps 등 상세 직무를 지칭하는 단어는 많지만 우선은 SRE에 대한 R&amp;amp;R 정리부터 해보려고 한다.&lt;br /&gt;
4. 개발 언어 한가지는 제대로 익히기 → 파이썬은 조금 다뤄봤지만 다른 언어는 사실 다 망각하고 새출발이라고 해도 될 것 같다. 내년에는 한가지는 제대로 익혀보고 싶다.&lt;br /&gt;
&lt;br /&gt;
업무 외적인 목표는 아래와 같다.&lt;br /&gt;
1. 방통대 졸업하기 → 올해 편입해서 1년을 다녔으니, 이제 1년 남았다. &lt;br /&gt;
2. 영어 공부 → 이건 뭐 평생 따라다니는 1년 목표이지. 빠지면 섭섭하니 넣어주자.&lt;br /&gt;
3. 알고리즘 &amp;amp; 기초수학 공부하기 → 그냥 개인적인 소망&lt;br /&gt;


그리고 취업 후에 찐 20kg의 살.... 내년에는 코로나 백신 맞고 헬스장을 다닐 수 있을까?
  &lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://images.velog.io/images/llunarian/post/af05075b-8d5f-44d1-8136-2a898a16cd57/image.png&quot; width=&quot;400px&quot; /&gt;
&lt;/p&gt;
&lt;/p&gt;</content><author><name>null_type</name></author><category term="diary" /><summary type="html">한줄 요약: 내가 이 짤을 올해 쓸 줄은 몰랐는데...🙊</summary></entry></feed>